# api_query.py

import sys
import os
import json
import logging

# Initialize logging configuration
logging.basicConfig(
    level=logging.CRITICAL,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('api_query.log'),
        logging.StreamHandler()
    ]
)

# Ensure the path is set for imports
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '.')))

# Import necessary functions from other modules
from api_client import query_clinical_trials, query_clinical_trial_by_nct
from api_json_handler import read_json, write_json
from data_cleaning import clean_study_data, extract_clinical_trial_info, filter_exclusion_criteria_and_write, save_all_study_data

def process_api_response(api_response):
    logging.debug("Processing API response")
    # Extract required information from API response
    studies = []
    if isinstance(api_response, dict) and 'studies' in api_response:
        studies = api_response['studies']
    elif isinstance(api_response, list):
        studies = api_response

    num_trials = len(studies)
    trial_names = []
    nct_numbers = []

    for study in studies:
        protocol_section = study.get('protocolSection', {})
        identification_module = protocol_section.get('identificationModule', {})
        
        brief_title = identification_module.get('briefTitle', 'N/A')
        nct_id = identification_module.get('nctId', 'N/A')
        
        trial_names.append(brief_title)
        nct_numbers.append(nct_id)

    stats = {
        "number_of_trials": num_trials,
        "trial_names": trial_names,
        "nct_numbers": ",".join(nct_numbers)
    }

    # Log the details
    logging.info(f"Number of trials: {num_trials}")
    logging.info(f"Trial names: {trial_names}")
    logging.debug(f"Extracted stats: {stats}")

    return stats

def log_query_details(query_details, stats, log_file='query_log.json'):
    logging.debug(f"Logging query details to {log_file}")
    log_data = {
        "query_details": query_details,
        "stats": stats
    }
    with open(log_file, 'a') as file:
        json.dump(log_data, file, indent=4)
        file.write("\n")

def clear_log_file(log_file='query_log.json'):
    logging.debug(f"Clearing log file: {log_file}")
    # Clear the log file at the beginning of the script
    open(log_file, 'w').close()

def main(input_file, output_file):
    logging.info(f"Reading from: {input_file}")
    logging.info(f"Writing to: {output_file}")

    # Clear the log file
    clear_log_file()

    # Read input JSON
    logging.debug("Reading input JSON")
    input_data = read_json(input_file)
    logging.debug(f"Input data: {input_data}")

    if 'nct_number' in input_data:
        # Query a single clinical trial based on NCT number
        logging.info("Querying single clinical trial by NCT number")
        api_response = query_clinical_trial_by_nct(input_data['nct_number'])
    else:
        # Query multiple clinical trials
        logging.info("Querying multiple clinical trials")
        api_response = query_clinical_trials(input_data)

    logging.debug(f"API response: {api_response}")

    # Process API response to extract statistics
    stats = process_api_response(api_response)

    # Log the query details to a JSON file
    log_query_details(input_data, stats)

    # Write the raw API response to the output JSON
    write_json(api_response, output_file)

    # Extract output directory from the output file path
    output_dir = os.path.dirname(output_file)
    logging.debug(f"Output directory: {output_dir}")

    # Call data cleaning functions
    extracted_data = extract_clinical_trial_info(api_response, output_dir)
    logging.debug(f"Extracted data: {extracted_data}")
    cleaned_data = clean_study_data(api_response, output_dir)
    logging.debug(f"Cleaned data: {cleaned_data}")
    filter_exclusion_criteria_and_write(cleaned_data, output_dir)
    save_all_study_data(api_response, output_dir)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python api_query.py <input_file> <output_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]
    main(input_file, output_file)
# ./tests/test_api_client.py

import unittest
from unittest.mock import patch
from api_actions.api_client import query_clinical_trials, query_clinical_trial_by_nct

class TestApiClient(unittest.TestCase):
    @patch('api_actions.api_client.requests.post')
    @patch('api_actions.api_client.time.sleep', return_value=None)  # Mock time.sleep to avoid delay in tests
    def test_query_clinical_trials(self, mock_sleep, mock_post):
        mock_response = mock_post.return_value
        mock_response.json.return_value = {"key": "value"}

        details = {
            'Age': '50', 
            'Gender': 'Female', 
            'Medical Condition': 'Triple Negative Breast Cancer', 
            'Location': 'Seattle, WA'
        }
        response = query_clinical_trials(details)
        self.assertEqual(response, {"key": "value"})
        mock_sleep.assert_called_once_with(1)  # Ensure the sleep was called

    @patch('api_actions.api_client.requests.get')
    @patch('api_actions.api_client.time.sleep', return_value=None)  # Mock time.sleep to avoid delay in tests
    def test_query_clinical_trial_by_nct(self, mock_sleep, mock_get):
        mock_response = mock_get.return_value
        mock_response.json.return_value = {"key": "value"}

        nct_number = "NCT12345678"
        response = query_clinical_trial_by_nct(nct_number)
        self.assertEqual(response, {"key": "value"})
        mock_sleep.assert_called_once_with(1)  # Ensure the sleep was called

if __name__ == '__main__':
    unittest.main()
# ./tests/test_api_json_handler.py

import unittest
import json
from api_actions.api_json_handler import read_json, write_json

class TestJsonHandler(unittest.TestCase):
    def test_read_json(self):
        with open('test_input.json', 'w') as file:
            json.dump({"key": "value"}, file)

        data = read_json('test_input.json')
        self.assertEqual(data, {"key": "value"})

    def test_write_json(self):
        data = {"key": "value"}
        write_json(data, 'test_output.json')

        with open('test_output.json', 'r') as file:
            result = json.load(file)
        
        self.assertEqual(result, data)

if __name__ == '__main__':
    unittest.main()
# ./tests/test_api_query.py

import unittest
from unittest.mock import patch, mock_open
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

from api_query import main as query_main

class TestQueryAPI(unittest.TestCase):

    @patch('builtins.open', new_callable=mock_open, read_data='{"nct_number": "NCT12345678"}')
    @patch('api_client.query_clinical_trial_by_nct')
    @patch('api_json_handler.write_json')
    def test_query_clinical_trial_by_nct_main(self, mock_write_json, mock_query_clinical_trial_by_nct, mock_file):
        mock_query_clinical_trial_by_nct.return_value = {
            "studies": [
                {"brief_title": "Trial 1", "nct_id": "NCT12345678"},
                {"brief_title": "Trial 2", "nct_id": "NCT87654321"}
            ]
        }

        input_file = 'input_test_nct.json'
        output_file = 'output_test.json'

        query_main(input_file, output_file)

        expected_stats = {
            "number_of_trials": 2,
            "trial_names": ["Trial 1", "Trial 2"],
            "nct_numbers": "NCT12345678,NCT87654321"
        }
        mock_write_json.assert_called_once_with(expected_stats, output_file)

    @patch('builtins.open', new_callable=mock_open, read_data='{"Age": "50", "Gender": "Female", "Medical Condition": "Triple Negative Breast Cancer", "Location": "Seattle, WA"}')
    @patch('api_client.query_clinical_trials')
    @patch('api_json_handler.write_json')
    def test_query_clinical_trials_main(self, mock_write_json, mock_query_clinical_trials, mock_file):
        mock_query_clinical_trials.return_value = [
            {"brief_title": "Trial 1", "nct_id": "NCT12345678"},
            {"brief_title": "Trial 2", "nct_id": "NCT87654321"}
        ]

        input_file = 'input_test_multiple.json'
        output_file = 'output_test.json'

        query_main(input_file, output_file)

        expected_stats = {
            "number_of_trials": 2,
            "trial_names": ["Trial 1", "Trial 2"],
            "nct_numbers": "NCT12345678,NCT87654321"
        }
        mock_write_json.assert_called_once_with(expected_stats, output_file)

if __name__ == '__main__':
    unittest.main()
# ./api_json_handler.py

import json

def read_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def write_json(data, file_path):
    with open(file_path, 'w') as file:
        json.dump(data, file, indent=4)
# data_cleaning.py

import json
import os
import re
import logging
from datetime import datetime

def split_eligibility_criteria(eligibility):
    pattern = re.compile(r'(Inclusion Criteria|Exclusion Criteria):?\n\n?', re.IGNORECASE)
    split_criteria = pattern.split(eligibility)
    
    criteria = {"InclusionCriteria": "", "ExclusionCriteria": ""}
    
    if len(split_criteria) > 1:
        for i in range(1, len(split_criteria), 2):
            section_title = split_criteria[i].lower()
            section_text = split_criteria[i + 1].strip()
            if 'inclusion' in section_title:
                criteria["InclusionCriteria"] = section_text
            elif 'exclusion' in section_title:
                criteria["ExclusionCriteria"] = section_text

    return criteria

def clean_study_data(studies, output_dir):
    cleaned_studies = []
    for study in studies:
        study_info = study.get('protocolSection', {})
        nct_id = study_info.get('identificationModule', {}).get('nctId', '')
        eligibility_criteria = study_info.get("eligibilityModule", {}).get("eligibilityCriteria", "")
        
        criteria = split_eligibility_criteria(eligibility_criteria)
        cleaned_study = {
            "EligibilityCriteria": eligibility_criteria,
            "InclusionCriteria": criteria["InclusionCriteria"],
            "ExclusionCriteria": criteria["ExclusionCriteria"],
            "HealthyVolunteers": study_info.get("eligibilityModule", {}).get("healthyVolunteers", ""),
            "Gender": study_info.get("eligibilityModule", {}).get("sex", ""),
            "MinimumAge": study_info.get("eligibilityModule", {}).get("minimumAge", ""),
            "NCTId": nct_id,
            "startDate": study_info.get("statusModule", {}).get("startDateStruct", {}).get("startDate", ""),
            "completionDate": study_info.get("statusModule", {}).get("completionDateStruct", {}).get("completionDate", "")
        }
        
        start_date_str = cleaned_study["startDate"]
        completion_date_str = cleaned_study["completionDate"]
        cleaned_study["durationDays"] = calculate_duration_days(start_date_str, completion_date_str)
        cleaned_study["daysUntilEnd"] = calculate_days_until_end(completion_date_str)

        cleaned_studies.append(cleaned_study)

    cleaned_file_path = os.path.join(output_dir, 'cleaned_data.json')
    save_json_to_file(cleaned_studies, cleaned_file_path, "Cleaned data")
    return cleaned_studies

def calculate_duration_days(start_date_str, end_date_str):
    if not start_date_str or not end_date_str:
        logging.error(f"Missing start or end date. Start date: '{start_date_str}', End date: '{end_date_str}'")
        return None

    date_format = "%Y-%m-%d"
    try:
        logging.debug(f"Parsing start date: '{start_date_str}', end date: '{end_date_str}'")
        start_date = datetime.strptime(start_date_str, date_format)
        end_date = datetime.strptime(end_date_str, date_format)
        duration_days = (end_date - start_date).days
        return duration_days
    except ValueError as e:
        logging.error(f"Date parsing error: {e}")
        return None

def calculate_days_until_end(end_date_str):
    if not end_date_str:
        logging.error(f"Missing end date: '{end_date_str}'")
        return None

    date_formats = ["%Y-%m-%d", "%Y-%m", "%Y"]
    for date_format in date_formats:
        try:
            logging.debug(f"Parsing end date: '{end_date_str}' with format: '{date_format}'")
            end_date = datetime.strptime(end_date_str, date_format)
            current_date = datetime.now()
            days_until_end = (end_date - current_date).days
            return days_until_end
        except ValueError:
            continue
    logging.error(f"Failed to parse end date: {end_date_str}")
    return None


def filter_exclusion_criteria_and_write(cleaned_data, output_dir):
    filtered_data = [
        {
            "ExclusionCriteria": f"(exclusion criteria not marked) {study['EligibilityCriteria']}" if not study["ExclusionCriteria"] else study["ExclusionCriteria"],
            "NCTId": study["NCTId"]
        }
        for study in cleaned_data
    ]

    filtered_file_path = os.path.join(output_dir, 'filtered_exclusion_data.json')
    save_json_to_file(filtered_data, filtered_file_path, "Filtered data")
    
def extract_clinical_trial_info(trial_data, output_dir):
    extracted_data = []
    for trial in trial_data:
        study_info = trial.get("protocolSection", {})
        start_date_str = study_info.get("statusModule", {}).get("startDateStruct", {}).get("date", "")
        completion_date_str = study_info.get("statusModule", {}).get("completionDateStruct", {}).get("date", "")
        
        def parse_date(date_str):
            date_formats = ["%B %d, %Y", "%Y-%m-%d", "%Y-%m", "%Y"]
            for fmt in date_formats:
                try:
                    return datetime.strptime(date_str, fmt)
                except ValueError:
                    continue
            return None
        
        start_date = parse_date(start_date_str)
        completion_date = parse_date(completion_date_str)
        duration_days = (completion_date - start_date).days if start_date and completion_date else None
        
        extracted_info = {
            "trialName": study_info.get("identificationModule", {}).get("officialTitle", ""),
            "nctNumber": study_info.get("identificationModule", {}).get("nctId", ""),
            "status": study_info.get("statusModule", {}).get("overallStatus", ""),
            "studyType": study_info.get("designModule", {}).get("studyType", ""),
            "studyPhases": study_info.get("designModule", {}).get("phases", []),
            "primaryCompletionDate": study_info.get("statusModule", {}).get("primaryCompletionDateStruct", {}),
            "completionDate": study_info.get("statusModule", {}).get("completionDateStruct", {}),
            "startDate": start_date_str,
            "startDateType": study_info.get("statusModule", {}).get("startDateStruct", {}).get("type", ""),
            "durationDays": duration_days,  # New field for duration in days
            "daysUntilEnd": calculate_days_until_end(completion_date_str)  # New field for days until end of the trial
        }
        extracted_data.append(extracted_info)

    extracted_file_path = os.path.join(output_dir, 'extracted_data.json')
    save_json_to_file(extracted_data, extracted_file_path, "Extracted data")
    return extracted_data

def save_json_to_file(data, path, description):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w') as file:
        json.dump(data, file, indent=4)
    logging.debug(f"{description} saved to '{path}'")

def load_json_from_file(path):
    with open(path, 'r') as file:
        return json.load(file)

def save_all_study_data(studies, output_dir):
    all_data_file_path = os.path.join(output_dir, 'all_study_data.json')
    save_json_to_file(studies, all_data_file_path, "All data")

if __name__ == "__main__":
    trials_data = load_json_from_file('path_to_your_json_file.json')
    output_dir = 'your_output_directory'
    extracted_data = extract_clinical_trial_info(trials_data, output_dir)
    cleaned_data = clean_study_data(trials_data, output_dir)
    filter_exclusion_criteria_and_write(cleaned_data, output_dir)
    save_all_study_data(trials_data, output_dir)
# ./process_api_response.py

import sys
import os
import json
import logging

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '.')))

from api_client import query_clinical_trials, query_clinical_trial_by_nct
from api_json_handler import read_json, write_json

def process_api_response(api_response):
    # Extract required information from API response
    if isinstance(api_response, dict) and 'studies' in api_response:
        studies = api_response['studies']
    elif isinstance(api_response, list):
        studies = api_response
    else:
        studies = []

    num_trials = len(studies)
    trial_names = [study.get('brief_title', 'N/A') for study in studies]
    nct_numbers = [study.get('nct_id', 'N/A') for study in studies]

    stats = {
        "number_of_trials": num_trials,
        "trial_names": trial_names,
        "nct_numbers": ",".join(nct_numbers)
    }

    # Log the details
    logging.info(f"Number of trials: {num_trials}")
    logging.info(f"Trial names: {trial_names}")

    return stats
# ./python_files_content.py

import sys
import os
import json
import logging

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '.')))

from api_client import query_clinical_trials, query_clinical_trial_by_nct
from api_json_handler import read_json, write_json

def process_api_response(api_response):
    # Extract required information from API response
    if isinstance(api_response, dict) and 'studies' in api_response:
        studies = api_response['studies']
    elif isinstance(api_response, list):
        studies = api_response
    else:
        studies = []

    num_trials = len(studies)
    trial_names = [study.get('brief_title', 'N/A') for study in studies]
    nct_numbers = [study.get('nct_id', 'N/A') for study in studies]

    stats = {
        "number_of_trials": num_trials,
        "trial_names": trial_names,
        "nct_numbers": ",".join(nct_numbers)
    }

    # Log the details
    logging.info(f"Number of trials: {num_trials}")
    logging.info(f"Trial names: {trial_names}")

    return stats

def log_query_details(query_details, stats, log_file='query_log.json'):
    log_data = {
        "query_details": query_details,
        "stats": stats
    }
    with open(log_file, 'a') as file:
        json.dump(log_data, file, indent=4)
        file.write("\n")

def main(input_file, output_file):
    logging.info(f"Reading from: {input_file}")
    logging.info(f"Writing to: {output_file}")

    # Read input JSON
    input_data = read_json(input_file)

    if 'nct_number' in input_data:
        # Query a single clinical trial based on NCT number
        api_response = query_clinical_trial_by_nct(input_data['nct_number'])
    else:
        # Query multiple clinical trials
        api_response = query_clinical_trials(input_data)

    # Process API response to extract statistics
    stats = process_api_response(api_response)

    # Log and write the query details to a JSON file
    log_query_details(input_data, stats)

    # Write the stats to the output JSON
    write_json(stats, output_file)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python api_query.py <input_file> <output_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]
    main(input_file, output_file)

import unittest
from unittest.mock import patch
from api_actions.api_client import query_clinical_trials, query_clinical_trial_by_nct

class TestApiClient(unittest.TestCase):
    @patch('api_actions.api_client.requests.post')
    @patch('api_actions.api_client.time.sleep', return_value=None)  # Mock time.sleep to avoid delay in tests
    def test_query_clinical_trials(self, mock_sleep, mock_post):
        mock_response = mock_post.return_value
        mock_response.json.return_value = {"key": "value"}

        details = {
            'Age': '50', 
            'Gender': 'Female', 
            'Medical Condition': 'Triple Negative Breast Cancer', 
            'Location': 'Seattle, WA'
        }
        response = query_clinical_trials(details)
        self.assertEqual(response, {"key": "value"})
        mock_sleep.assert_called_once_with(1)  # Ensure the sleep was called

    @patch('api_actions.api_client.requests.get')
    @patch('api_actions.api_client.time.sleep', return_value=None)  # Mock time.sleep to avoid delay in tests
    def test_query_clinical_trial_by_nct(self, mock_sleep, mock_get):
        mock_response = mock_get.return_value
        mock_response.json.return_value = {"key": "value"}

        nct_number = "NCT12345678"
        response = query_clinical_trial_by_nct(nct_number)
        self.assertEqual(response, {"key": "value"})
        mock_sleep.assert_called_once_with(1)  # Ensure the sleep was called

if __name__ == '__main__':
    unittest.main()

import unittest
import json
from api_actions.api_json_handler import read_json, write_json

class TestJsonHandler(unittest.TestCase):
    def test_read_json(self):
        with open('test_input.json', 'w') as file:
            json.dump({"key": "value"}, file)

        data = read_json('test_input.json')
        self.assertEqual(data, {"key": "value"})

    def test_write_json(self):
        data = {"key": "value"}
        write_json(data, 'test_output.json')

        with open('test_output.json', 'r') as file:
            result = json.load(file)
        
        self.assertEqual(result, data)

if __name__ == '__main__':
    unittest.main()

import unittest
from unittest.mock import patch, mock_open
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

from api_query import main as query_main

class TestQueryAPI(unittest.TestCase):

    @patch('builtins.open', new_callable=mock_open, read_data='{"nct_number": "NCT12345678"}')
    @patch('api_client.query_clinical_trial_by_nct')
    @patch('api_json_handler.write_json')
    def test_query_clinical_trial_by_nct_main(self, mock_write_json, mock_query_clinical_trial_by_nct, mock_file):
        mock_query_clinical_trial_by_nct.return_value = {
            "studies": [
                {"brief_title": "Trial 1", "nct_id": "NCT12345678"},
                {"brief_title": "Trial 2", "nct_id": "NCT87654321"}
            ]
        }

        input_file = 'input_test_nct.json'
        output_file = 'output_test.json'

        query_main(input_file, output_file)

        expected_stats = {
            "number_of_trials": 2,
            "trial_names": ["Trial 1", "Trial 2"],
            "nct_numbers": "NCT12345678,NCT87654321"
        }
        mock_write_json.assert_called_once_with(expected_stats, output_file)

    @patch('builtins.open', new_callable=mock_open, read_data='{"Age": "50", "Gender": "Female", "Medical Condition": "Triple Negative Breast Cancer", "Location": "Seattle, WA"}')
    @patch('api_client.query_clinical_trials')
    @patch('api_json_handler.write_json')
    def test_query_clinical_trials_main(self, mock_write_json, mock_query_clinical_trials, mock_file):
        mock_query_clinical_trials.return_value = [
            {"brief_title": "Trial 1", "nct_id": "NCT12345678"},
            {"brief_title": "Trial 2", "nct_id": "NCT87654321"}
        ]

        input_file = 'input_test_multiple.json'
        output_file = 'output_test.json'

        query_main(input_file, output_file)

        expected_stats = {
            "number_of_trials": 2,
            "trial_names": ["Trial 1", "Trial 2"],
            "nct_numbers": "NCT12345678,NCT87654321"
        }
        mock_write_json.assert_called_once_with(expected_stats, output_file)

if __name__ == '__main__':
    unittest.main()

import json

def read_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def write_json(data, file_path):
    with open(file_path, 'w') as file:
        json.dump(data, file, indent=4)

import sys
import os
import json
import logging

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '.')))

from api_client import query_clinical_trials, query_clinical_trial_by_nct
from api_json_handler import read_json, write_json

def process_api_response(api_response):
    # Extract required information from API response
    if isinstance(api_response, dict) and 'studies' in api_response:
        studies = api_response['studies']
    elif isinstance(api_response, list):
        studies = api_response
    else:
        studies = []

    num_trials = len(studies)
    trial_names = [study.get('brief_title', 'N/A') for study in studies]
    nct_numbers = [study.get('nct_id', 'N/A') for study in studies]

    stats = {
        "number_of_trials": num_trials,
        "trial_names": trial_names,
        "nct_numbers": ",".join(nct_numbers)
    }

    # Log the details
    logging.info(f"Number of trials: {num_trials}")
    logging.info(f"Trial names: {trial_names}")

    return stats

API_ENDPOINT_CLINICAL_TRIALS = "https://clinicaltrials.gov/api/v2/studies"

import requests
import time
import logging
from api_config import API_ENDPOINT_CLINICAL_TRIALS
from urllib.parse import urlencode

class ClinicalTrialsAPI:
    def __init__(self, page_size=200, status_filter="RECRUITING|NOT_YET_RECRUITING|AVAILABLE"):
        self.page_size = page_size
        self.status_filter = status_filter

    def send_query_to_clinicaltrials(self, details, distance):
        details["Distance"] = str(distance)
        all_studies = []
        cursor = None

        while True:
            query_url = self.construct_query_url(details, self.status_filter, self.page_size, cursor)

            response = requests.get(query_url)
            if response.status_code == 200:
                data = response.json()
                studies = data.get('studies', [])
                all_studies.extend(studies)

                cursor = data.get('nextCursor')
                if not cursor:
                    break
            else:
                logging.error(f"Error {response.status_code}: {response.text}")
                break

            # Ensure at least a 1 second pause between API calls
            time.sleep(1)

        return all_studies

    def construct_query_url(self, details, status_filter, page_size, cursor=None):
        condition = details.get("Medical Condition", "")
        gender = details.get("Gender", "").lower()
        latitude = details.get("Latitude", "")
        longitude = details.get("Longitude", "")
        distance = details.get("Distance", "100")

        geo_filter = f"distance({latitude},{longitude},{distance})"

        query_params = {
            "format": "json",
            "query.cond": condition,
            "filter.geo": geo_filter,
            "aggFilters": f"sex:{gender[0]}",
            "filter.overallStatus": status_filter,
            "pageSize": page_size
        }

        if cursor:
            query_params["nextCursor"] = cursor

        query_string = urlencode(query_params, safe="(),|")
        query_url = f"{API_ENDPOINT_CLINICAL_TRIALS}?{query_string}"
        
        return query_url

def query_clinical_trials(details):
    api = ClinicalTrialsAPI()
    return api.send_query_to_clinicaltrials(details, details.get("Distance", 100))

def query_clinical_trial_by_nct(nct_number):
    url = f"{API_ENDPOINT_CLINICAL_TRIALS}/{nct_number}?format=json"
    headers = {
        'Content-Type': 'application/json'
    }
    
    # Ensure at least a 1 second pause between API calls
    time.sleep(1)
    
    response = requests.get(url, headers=headers)
    return response.json()
# ./api_config.py

API_ENDPOINT_CLINICAL_TRIALS = "https://clinicaltrials.gov/api/v2/studies"
# ./api_client.py

import requests
import time
import logging
from api_config import API_ENDPOINT_CLINICAL_TRIALS
from urllib.parse import urlencode

class ClinicalTrialsAPI:
    def __init__(self, page_size=200, status_filter="RECRUITING|NOT_YET_RECRUITING|AVAILABLE"):
        self.page_size = page_size
        self.status_filter = status_filter

    def send_query_to_clinicaltrials(self, details, distance):
        details["Distance"] = str(distance)
        all_studies = []
        cursor = None

        while True:
            query_url = self.construct_query_url(details, self.status_filter, self.page_size, cursor)

            response = requests.get(query_url)
            if response.status_code == 200:
                data = response.json()
                studies = data.get('studies', [])
                all_studies.extend(studies)

                cursor = data.get('nextCursor')
                if not cursor:
                    break
            else:
                logging.error(f"Error {response.status_code}: {response.text}")
                break

            # Ensure at least a 1 second pause between API calls
            time.sleep(1)

        return all_studies

    def construct_query_url(self, details, status_filter, page_size, cursor=None):
        condition = details.get("Medical Condition", "")
        gender = details.get("Gender", "").lower()
        latitude = details.get("Latitude", "")
        longitude = details.get("Longitude", "")
        distance = details.get("Distance", "100")

        geo_filter = f"distance({latitude},{longitude},{distance})"

        query_params = {
            "format": "json",
            "query.cond": condition,
            "filter.geo": geo_filter,
            "aggFilters": f"sex:{gender[0]}",
            "filter.overallStatus": status_filter,
            "pageSize": page_size
        }

        if cursor:
            query_params["nextCursor"] = cursor

        query_string = urlencode(query_params, safe="(),|")
        query_url = f"{API_ENDPOINT_CLINICAL_TRIALS}?{query_string}"
        
        return query_url

def query_clinical_trials(details):
    api = ClinicalTrialsAPI()
    return api.send_query_to_clinicaltrials(details, details.get("Distance", 100))

def query_clinical_trial_by_nct(nct_number):
    url = f"{API_ENDPOINT_CLINICAL_TRIALS}/{nct_number}?format=json"
    headers = {
        'Content-Type': 'application/json'
    }
    
    # Ensure at least a 1 second pause between API calls
    time.sleep(1)
    
    response = requests.get(url, headers=headers)
    return response.json()
